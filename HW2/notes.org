HW2 -*-mode: org -*-
#+TITLE: Homework 2
#+AUTHOR: Darren
#+DATE: <2022-01-21 Fri>

* Building Compound Types

  Base types are int, bool, unit and char. Use those to build nested compound types
e.g. tuples, lists, options.

  Building blocks in other languages:
  - "Each of": A t value contains values of t1 ... tn
  - "One of": A t value contains value of one of t1 ... tn
  - "Self Reference": A value referencing its own value e.g. tries

** Examples of compound types
  - Tuples: e.g. int * bool contain both int AND bool
  - Options: e.g. int option contains an int OR no data (one-of data type)
  - Lists: All three blocks, e.g. either int AND int list or no data
  - Nesting compound types: e.g. ((int * int) option)
* Records

  e.g. val x = {bar=(1+2, true andalso true), foo=3+4, baz=(false,9)}
  - entered into REPL (which will alphabetize them)

  e.g val my_niece = {name = "Amelia", id = 41123 -12}
  - In the REPL -> val my_niece = {id=41111,name="Amelia"} : {id:int, name:string}
  - To access field names, use #, e.g. #id my_niece; -> val it = 41111 : int

Records are NOT ordered, even though REPL will order then in alphabetical order.

** Record values:

{f1 = v1, ...., fn = vn}

Record values have fields holding values

** Record types:

{f1 : t1, .... fn : tn}

** Building records:

{f1 = e1, .... fn = en}

** Accessing pieces in records

#myfieldname e (if field not found in record, type checker in static env will throw type error)

*** Name vs Position

e.g. (1,2,3) vs {f=1,g=2,h=3}
 - Tuples are shorter
 - With more items, records are better (no need to remember index)

E.g. in python, caller uses positions to allocate method args, but callee uses variable names to find out
which position is for which arg.

* Syntactic Sugar

Tuples have syntax, type-checking rules and evaluation rules

But also possible to:
 - Use records to write tuples
 - (e1, ... en) is another way of writing {1=e1, .... n=en}
 - t1*..... *tn is another form of {1:t1,.... n:tn} -> e.g. records with field names, 1,2 etc

Tuples don't exist, they are just fancy records.

Syntactic sugar = simplify understanding and implementation of language features
e.g. if e1 = e2 is the same as if e1 then e2, else false

* Datatype bindings

e.g. datatype mytype = TwoInts of int * int
                     | Str of string
                     | Pizza

 - In the env, a new type mytype is added
 - New constructors are added, TwoInts, Str and Pizza

Constructors = to construct values of mytype from args provided, e.g.
 - TwoInts : int * int -> mytype
 - Str : string -> mytype
 - Pizza : mytype

Values of constructors contain:
 - 'tags' e.g. val a = Str "hi" : mytype => Str type of mytype
 - data e.g (7,9)

** Using datatype bindings

Building and accessing them

2 main aspects:
 - Check what variant it is e.g. what constructor made it
 - Extract the data (if any)

Some common functions e.g. null, isSome, check for variants, others e.g. hd, tl, valOf extract data

For ML, some additions to datatype bindings:
 - "isStr" to check for Str variants
 - "getStrData" to get value of Str variant

* Case Expressions

E.g.

fun f x = (* f has type mytype -> int *)
    case x of
        Pizza => 3
      | TwoInts(i1, i2) => i1 + i2
      | Str s => String.size s

Flow:
 - If pizza, evaluation = 3
 - If string s then 8, s is a var binding to the data under string constructor
 - Evaluate Twoints where i1 = first int, i2 = second int, then add both branches

_s must be an argument of type mytype, not string!_

Within case expression, each case = individual let expressions with local bindings,
e.g. only in that branch.

*Type of case exp = type of individual branches*

Each pattern (sub case) in a case exp = constructor name + right no. of variables (C (x, y), etc)
They are not evaluated! Only check if main case e0 matches them.

Compile time errors:
 - If new case e.g. Pizza => 4 (redundant case!)

With a new fn, fun g x = case x of Pizza => 3
 - Since x should have 3 cases, in this case we declared only 1
 - Compiler will issue warning that in some scenarios, "match nonexhaustive"
 - Run time exception if g (str "hi") because case exp not found

* Useful Datatypes

Enums = identifying playing cards, e.g. datatype suit = Club | Diamond | Heart | Spade

Student registrations, e.g.

datatype id = StudentNum of int
            | Name of string
                      * (string option)
                      * string

** Expression Trees

E.g defining self referencing expressions

datatype exp = Constant of int
             | Negate of exp
             | Add of exp * exp
             | Multiply of exp * exp

leaves of trees: constants where values are attached
branches: smaller exp that take in 1 or 2 child exp

* Pattern matching review

datatype t = C1 of t1 | C2 of t2 | .... Cn of tn

** Evaluation rules

Flow:
 1. Evaluate e to a value v
 2. if pi = first pattern to match v, then result  = eval of ei in sub-env extended by the case expression
 3. Pattern ci (x1.... xn) matches value ci (v1.... vn) and extends env with x1 to v1.... xn to vn
 4. For constructors with "no data", pattern ci matches value ic

* Another case exp example

datatype exp = Constant of int
             | Negate of exp
             | Add of exp * exp
             | Multiply of exp * exp

define max_constant : exp -> int

...

end state ->
fun max_constant e =
    case e of
    Constant i => i
   | Negate e2 => max_constant e2
   | Add(e1, e2) => Int.max(max_constant e1, max_constant e2)
   | Multiply(e1, e2) => Int.max(max_constant e1, max_constant e2)

Test case ->

val test_exp = Add (Constant 19, Negate (Constant 4))
val nineteen = max_constant test_exp (* should get 19! *)

* Type Synonyms

datatype bindings:
 - New type name
 - Use constructors to create values of the new type

whereas for type synonyms:
 - New name for a type (e.g symlink)
 - type and name are interchangeable
 - REPL will pick based on order of record field names

datatype suit = Club | Diamond | Heart | Spade
datatype rank = Jack | Queen | King | Ace | Num of int (e.g. 1-9)

here, a new type synonym is introduced:

type card = suit * rank

fun is_spade_queen (c : card) =
    #1 c = Spade andalso #2 c = Queen

val c1 : card = (Diamond,Ace)
val c2 : suit * rank = (Heart,Ace)
val c3 : (Spade,Ace)

All bindings are valid

Q: Whats the point?
 - Convenience (e.g. if suit and rank already defined)
 - card -> bool is the same as suit * rank -> bool

* List and Options are Datatypes

Appending lists in ML:

E.g.
datatype my_int_list = Empty (* empty list *)
                     | Cons of int * my_int_list

val x = Cons(4,Cons(23, Cons(2008,Empty)))

fun append_my_list (xs, ys) =
    case xs of
        Empty => ys (* if list is empty, return ys *)
      | Cons(x, xs') => Cons(x, append_my_list(xs', ys)

Even though allowed: *considered bad style!*

** Options are datatype bindings!
NONE and SOME are constructors
 - E.g. pattern matching of isSome and valOf

alt. equivalent pattern matching code:

fun inc_or_zero intoption =
    case intoption of
        NONE => 0
      | SOME i => i+1

** Lists are datatypes
No more hd, tl or null
 - [] and :: are constructors

fun sum_list xs =
    case xs of
        [] => 0
      | x::xs' => x + sum_list xs'

fun append (xs, ys) =
    case xs of
        [] => ys
      | x::xs' => x :: append(xs', ys)

** Why pattern matching?
Better for options and lists
 - No missing cases, e.g. tl on empty list, no exceptions on wrong variant
 - predefined null, tl, hd are for passing as args + convenience

* Polymorphic Datatypes

List and options are not needed
 - Only special syntax for list constructors
 - Recall that lists have a type e.g. int list (not just list)

Some functions may/may not be polymorphic e.g. val sum_list : int list -> int

** Defining options

datatype 'a option = NONE | SOME of 'a (* some carries whatever type 'a carries as params *)

** Defining lists

datatype 'a mylist = Empty | Cons of 'a * 'a mylist

* Each-of Pattern Matching

Every val binding and function binding uses pattern matching
 - Every fn takes only 1 argument

Records and tuples:
 - Pattern (x1... xn) matches tuple value (v1 ... vn)
   - No. of variables in pattern = no. of pieces in tuple
 - Pattern {f1=x1... fn=xn} matches record value {f1=v1, ... fn=vn}

** Val binding patterns
Val bindings, e.g. val p = e can use a pattern, not just a variable
 - get all the pieces out of each-of type
 - or only some parts out

e.g. if val NONE = SOME 2;
 - will result in 'bind' exception because val bindings pattern match on execution,
since NONE =/= SOME 2 but no other patterns are available, it fails

*** Okayish Examples
fun sum_triple triple =
    let val (x,y,z) = triple
    in
        x + y + z
    end

fun full_name r =
    let val {first=x, middle=y, last=z} = r
    in
        x & " " ^ y ^ " " ^ z
    end

*** Good examples
fun sum_triple (x,y,z) =
    x + y + z

fun full_name {first=x, middle=y, last=z} =
    x ^ " " ^ y ^ " " ^ z

** Functions
Multi argument functions in ML:
 - take in 1 tuple arg wit a tuple pattern in binding
 - pattern match the required args out

if zero args are provided, the unit pattern () is used, matching the unit value ()

* Type inference
Note: do not use # in HW2, or write down explicit types

In general, using of # or #foo in records will limit the type checker's ability to infer
types in fn args

** Similar code but using #
fun sum_triple2 (triple : int*int*int) =
    #1 triple + #2 triple + #3 triple

fun full_name2 (r: {first:string, middle:string, last:string}) =
    #first r ^ " " ^ #middle r ^ " " ^ #last r

In SML, fn must have correct args provided e.g. either 3 or 4 tuples
- here types are provided in fn def
- if not provided, SML does not know how many types should be provided, e.g. if fun sum_triple2 (triple) = ..

** Generalizing types
E.g. if some params provided are not used, ML will render them to be a more general type e.g. 'a (any)

fun partial_sum (x, y, z) =
    x + z

* Polymorphic and equality types

With a function that appends 2 string lists:

fun append(xs, ys) =
    case xs of
        [] => ys
      | x::xs' => x :: append(xs', ys)

implementation result => 'a list * 'a list * 'a list (more general than expected)

Ok implementations:
 - val ok1 = append(["hi","ok"],["foo","bar"])
 - val ok2 = append([1,2],[4,5])

NOT ok:
 - val not_ok = append([1,2],["foo","bar"])

** General rules
 - A type t1 is more general than the type t2 if one can take t1, replace its type variables consistently
and get t2
 - Type synonyms do not matter
 - Order of field names do not matter

If a more specific type is requested for and a general type is provided, generally OK
e.g:
 - {quux: 'b, bar: int*'a, baz: 'b}
 - {quux: string, bar: foo, baz: string} => quux and baz replaced with the same type (string), foo = int*int
 - {bar: int*int, baz: string, quux: string} => similar to above

** Equality types
Type variables with a second quote:
 - E.g. ''a list * ''a -> bool

Arise from using = operator (not all types e.g. functional types, real)

*** Examples of ''
fun same_thing (x, y) =
    if x=y then "yes" else "no"

fun is_three x =
    if x=3 then "yes" else "no"

ignore 'calling' polyEqual' exception

* Nested Patterns
Possible to nest patterns and expressions

Pattern matching = compare a pattern against a value of the "same shape" and
bind variables to the right parts

** Example

zip3([1,2,3],[4,5,6],[7,8,9])
=> [(1,4,7),(2,5,8),(3,6,9)])

** Code

fun zip3 list_triple =
    case list_triple of
        ([],[],[]) => [] (*base case*)
      | (hd1::tl1, hd2::tl2, hd3::tl3) => (hd1,hd2,hd3)::zip3(tl1,tl2,tl3)
      | _ => raise ListLengthMismatch (*raise exception for all other cases*)

fun unzip3 lst =
    case lst of
        [] => ([],[],[])
      | (a,b,c)::tl => let val (l1,l2,l3) = unzip3 tl
                       in
                           (a::l1,b::l2,c::l3)
                       end

* Other nested patterns

Code that checks for presence of decreasing items

fun nondecreasing xs = (* int list -> bool *)
    case xs of
        [] => true
      | _::[] => true
      | head::(neck::rest) => head <= neck andalso nondecreasing (neck::rest)

datatype sgn = P | N | Z

fun multsign (x1,x2) = (* int * int -> sgn *)
    let fun sign x = if x=0 then Z else if x>0 then P else N
    in
        case (sign x1, sign x2) of
            (Z,_) => Z
          | (_,Z) => Z
          | (P,P) => P
          | (N,N) => P
          | _ => N
    end

Rules for nested pattern matching:
 - Avoid nested cases if patterns are simpler
 - Match against a tuple of datatypes to compare them (! common pattern)
 - Wildcards if usable (! save on variable bindings)

* Nested patterns

Roughly:
 - If p is a var x, x is bound to v
 - If p is _, match succeeds and no bindings occur
 - If p = (p1... pn), v = (v1... vn), match succeeds if p1 match v1, p2 match.... vn.
   Bindings = union of all bindings from submatches
 - If p is C p1, match suceeds is v is C v1 (same constructor) and p1 matches v1.
 - etc

E.g.

** Examples
 - Pattern a::b::c::d matches all lists >= 3 elements
 - Pattern a::b::c::[] matches all lists = 3 elements
 - Pattern ((a,b),(c,d))::e matches all non empty lists of pairs of pairs

* Function Patterns

alternate way of writing case exp:
fun f x =
    case x of
        p1 => e1
      | p2 => e2

equivalent to

fun f p1 = e1
  | f p2 = e2

ONLY if x is not used in any branch. If used, a compilation will fail.

* Exceptions

Exception bindings:
 - exception TestException
 - exception TestException of int * int

Use 'raise' to throw exceptions
 - raise TestException
 - raise (Testexception(7,9))

Handle exceptions with 'handle'
 - e1 handle TestException => e2
 - e1 handle Testexception(x,y) => e2

exceptions can be added as params -> type exn
 - pass values of exn everywhere
 - Handle can have many branches for patterns of multiple exn

* Tail recursion

Some good uses of recursion:
 - Tries
 - Appending lists
 - Avoiding mutation

Typically, recursive calls start from the head and perform computation on each level of the stack.

E.g.

fun fact n = if n=0 then 1 else n*fact(n-1)
val x = fact 3

Flow:
 1. fact 3
 2. fact 3: 3*(ans), fact 2
 3. fact 3: 3*(ans), fact 2*(ans), fact 1
 4. ....
 5. fact 0

** Tail call:
fun fact n =
    let fun aux(n, acc) =
        if n = 0
        then acc
        else aux (n-1, acc*n)
    in
        aux(n, 1)
    end

val x = fact 3

*No remaining multiplcation is done at the end!*

* Accumulators
In general, tail recursive calls can be more efficient

Rewriting recursive calls to become tail calls:
 - Create helper function that takes in accumulator
 - Old base case becomes initial accumulator
 - New base case becomes final accumulator

** Examples

Summing numbers up

fun sum xs =
    case xs of
        [] => 0
      | x::xs' => xs + sum xs'

fun sum xs =
    let fun aux(xs, acc) =
        case xs of
            [] => acc
          | x::xs' => aux(xs', x+acc)
    in
        aux(xs,0)
    end

Reversing a list

fun rev xs =
    case xs of
        [] => []
      | x::xs' => (rev xs) @ [x]

(* here the append @ operator needs to traverse the list, making it O(n^2))

fun rev xs =
    let fun aux(xs, acc) =
        case xs of
            [] => acc
          | x::xs' => aux(xs', x::acc)
    in
        aux(xs,[])
    end

* Tail recursion perspectives

Functions that process trees:
 - Tail rec might not be better since data structures need to be built up to keep track of position in stack
 - Here, natural recursive calls are better

Do not prematurely optimise!

** Tail calls
A function call in a tail position = a tail call
 - If expression not in tail, no subexpressions are
   - fun f p = e, e is in tail
   - if e1 then e2 else e3, e3 and e2 are in tail but e1 is not
